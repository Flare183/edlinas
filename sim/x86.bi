TYPE DESCR               ' See Agarwal pp 32, 33.
    BaseAdd AS DOUBLE
    Limit AS DOUBLE
    DPL AS INTEGER
    Valid AS INTEGER
    CDSeg AS INTEGER
    Readable AS INTEGER
    Writable AS INTEGER
    Executable AS INTEGER
    Conforming AS INTEGER
    ExpandDown AS INTEGER
    Typ AS INTEGER
    DefaultAttr AS INTEGER
    GDField AS INTEGER
    Accessed AS INTEGER
    Selectr AS LONG
    Offst AS DOUBLE
    ParamCount AS INTEGER
END TYPE
REM
REM The Boolean fields, Valid-ExpandDown, have values -1 or 0.
REM
REM  Visible Hardware
REM
DIM descrVec(9) AS DESCR
DIM genReg(7) AS STRING * 8
DIM segReg(7)
DIM ctrlReg#(4), debReg#(7), testReg#(7)
COMMON SHARED descrVec() AS DESCR, genReg() AS STRING * 8, segReg(), ctrlReg#(), debReg#(), testReg#()
DIM brkpt.active%(4)
COMMON SHARED brkpt.active%()
REM
REM Hardware Description
REM
COMMON SHARED ADDR.BITS, ARCHNUM

COMMON SHARED EIP#, prev.EIP#
COMMON SHARED AC, VM, RF, NT, IOPL, OF, DF, IE, SF, ZF, AF, PF, CF
REM The flags have values 0 or +1.
COMMON SHARED NMI.handler.active AS INTEGER, XH.flag AS INTEGER
COMMON SHARED task.switch.in.progress AS INTEGER
COMMON SHARED prev.TF AS INTEGER, prev.inst.loaded.SS AS INTEGER
COMMON SHARED INTR.pin.active AS INTEGER, NMI.pin.active AS INTEGER
COMMON SHARED CPL AS INTEGER, prev.CPL AS INTEGER
COMMON SHARED exception.count AS INTEGER, first.page.fault.seen AS INTEGER
CONST ARCH.DIM = 7
CONST ENV.DIM = 10
CONST N.REGISTERS = 53
DIM ARCHNAME$(ARCH.DIM)
DIM ENV$(ENV.DIM)
DIM REGISTER.LIST$(N.REGISTERS)
COMMON SHARED REGISTER.LIST$(), ARCHNAME$(), ENV$(), N.DEFS
REM
REM Assembler Directives
REM
CONST N.DIRECTIVES = 13
DIM DIRECTIVE.LIST$(N.DIRECTIVES)
COMMON SHARED DIRECTIVE.LIST$()
REM
REM Source Code Description
REM
CONST MAXNUM.INST = 100
DIM INST.ADR#(MAXNUM.INST), LABEL.LIST$(MAXNUM.INST)
DIM DISPLABEL.CODE(MAXNUM.INST), RAW.SRCE$(MAXNUM.INST), SRC.LINE(MAXNUM.INST)
DIM DISPLABEL.LIST$(MAXNUM.INST), SHOW.SRCE$(MAXNUM.INST)
COMMON SHARED PROG.LEN, SRC.LINE()
COMMON SHARED INST.ADR#(), LABEL.LIST$(), DISPLABEL.LIST$(), RAW.SRCE$()
COMMON SHARED A86$, SHOW.SRCE$(), DISPLABEL.CODE()
REM
REM Assembler Control
COMMON SHARED USE.SIZE AS INTEGER, USE.INSTSET AS INTEGER, USE.O AS INTEGER
REM
REM Object Code file memory image
REM
CONST LOAD.ORIGIN# = 0# '  a.out files are built in Memory starting here
CONST STORE.ORIGIN = -32#  '  Command mode commands are stored here.
REM
REM  Simulator Control
DIM PLACE.MARK(7)
DIM HEADER(8) AS LONG
COMMON SHARED HEADER() AS LONG
COMMON SHARED INTERRUPT.RECEIVED AS INTEGER, INTERRUPT.NUMBER AS INTEGER
COMMON SHARED HALT.FLAG AS INTEGER, COMMAND.MODE AS INTEGER
COMMON SHARED SCREEN.FLAG AS INTEGER, LAST.LINE AS INTEGER, WALK.MODE AS INTEGER 
COMMON SHARED SKIP.DEPTH AS INTEGER, CALL.DEPTH AS INTEGER
COMMON SHARED CURRENT.INST AS INTEGER, FIRST.LINE AS INTEGER
COMMON SHARED INSTRUCTION.RECOGNIZED AS INTEGER, CODE.WINDOW.FLAG AS INTEGER
COMMON SHARED PLACE.MARK(), STORE.COMMAND$, BOTTOM.STACK#, INSTTIM
REM
REM DOS Environment
COMMON SHARED LOCKS.OK, MEM.PATH$, DAT.PATH$
REM
CONST EAX = 0
CONST ECX = 1
CONST EDX = 2
CONST EBX = 3
CONST ESP = 4
CONST EBP = 5
CONST ESI = 6
CONST EDI = 7
CONST AX = 8
CONST CX = 9
CONST DX = 10
CONST BX = 11
CONST SP = 12
CONST BP = 13
CONST SI = 14
CONST DI = 15
CONST AL = 16
CONST CL = 17
CONST DL = 18
CONST BL = 19
CONST AH = 20
CONST CH = 21
CONST DH = 22
CONST BH = 23

CONST ES = 0
CONST CS = 1
CONST SS = 2
CONST DS = 3
CONST FS = 4
CONST GS = 5
CONST LDT = 6
CONST TSS = 7
CONST GDT = 8
CONST IDT = 9

CONST PROTECTED = 0
CONST REAL = 1
CONST VM86 = 2

REM
REM 4 bit Typ Field of DESCR
REM p34
REM reserved 0
CONST NOTBUSY.TSS16 = 1
CONST LDT.SEG = 2
CONST BUSY.TSS16 = 3
CONST CALLGATE16 = 4
CONST TASKGATE = 5
CONST INTERRUPTGATE16 = 6
CONST TRAPGATE16 = 7
REM reserved 8
CONST NOTBUSY.TSS32 = 9
REM reserved 10
CONST BUSY.TSS32 = 11
CONST CALLGATE32 = 12
REM reserved 13
CONST INTERRUPTGATE32 = 14
CONST TRAPGATE32 = 15

REM p154
CONST DIVIDE% = 0
CONST DEBUG% = 1
CONST NMI% = 2
CONST INT3% = 3
CONST OVERFLOW% = 4
CONST BOUND% = 5
CONST INVALID.INSTR% = 6
CONST PE.UNAVAILABLE% = 7
CONST DOUBLEFAULT% = 8
CONST PE.OVERRUN% = 9
CONST TASK% = 10
CONST NP% = 11
CONST STACK% = 12
CONST GP% = 13
CONST PAGE% = 14
CONST PE.ERR0R% = 16
CONST ALIGN% = 17

CONST TRUE% = -1      ' Otherwise NOT TRUE isn't FALSE
CONST FALSE% = 0

DECLARE FUNCTION LA.read# (POINTER#, N.BYTES!)
DECLARE SUB LA.write (POINTER#, IMM.NUM#, N.BYTES)
DECLARE FUNCTION lg.read# (SREG.NUM!, offset#, N.BYTES!)
DECLARE SUB lg.write (SREG.NUM!, offset#, X#, N.BYTES!)
DECLARE FUNCTION GetOffset# (SEG.REGISTER!, ADDRESS.LENGTH!, MODRM.DEC.NUM!)
DECLARE FUNCTION fetch.code# (N.BYTES!)
DECLARE FUNCTION REG# (REG.NUM!)
DECLARE FUNCTION MemRead# (X#, N.BYTES!)
DECLARE FUNCTION FLAGS# (N.BYTES!)
DECLARE FUNCTION mode! ()
REM
REM Conversion Functions
REM
DECLARE FUNCTION Bits# (X#, hi!, lo!)
DECLARE FUNCTION BinVal# (BinString$)
DECLARE FUNCTION BitStr$ (value#, LENGTH)
DECLARE FUNCTION HexStr$ (value#, LENGTH!)
DECLARE FUNCTION HexVal# (HexString$)
DECLARE FUNCTION Mod2N# (NUM#, N!)
DECLARE FUNCTION BYTE.SWAP$ (HEX.STRING$)
DECLARE FUNCTION RandomBytes# (N!)

